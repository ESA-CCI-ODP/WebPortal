/**
 * The PEEP error class. /peep/core/error
 * 
 * Provides a unified interface to the error and message toasters
 * 
 * Error messages are generated by this object by publishing a message to
 * /peep/system/error or /peep/system/message with a key to the message as
 * the payload.
 * 
 * Direct calls to the _errMsg() method. are NOT RECOMMENDED. they are not
 * guaranteed or supported since _errMsg() is a system method and subject
 * to change at any time. The correct process will be maintained in order
 * to keep error handling transparent.
 * 
 * Usage:
 * 
 * require(['peep/core/error']);
 * 
 * 
 * 
 * Created: 12/04/2013
 * 
 * Update History
 * ==============
 * Date        | by               | Detail
 * 12/04/2013  | K. Salt          | Initial Create
 * 24/05/2013  | K. Salt          | v 0.1 Stable and tested. v 0.11 commenced
 *  
 * @version: 0.11
 * @author: K. Salt
 * 
 * copyright: Telespazio-Vega, 2013 and University of Reading 2006-2012
 * 
 */

define(
  [
    'dojo/_base/declare'
  , 'dojo/has'
  , 'dojo/_base/lang'
  , 'dojo/_base/array'
  , 'dojo/topic'
  , 'peep/lang/strings'
  ]
, function(declare, has, lang, array, topic, strings) {
    return declare(null, {
        _strings: null
      , _subscriptions: {}         // just a placeholder to keep the handles to the current subscriptions.
      
      , constructor: function(){
          var _this = this;
          this._strings = new strings();
          this._strings.init();
          // first thing we want to do is set up the system-wide listeners ...
          // error and message handlers first
          this._subscriptions.error     = topic.subscribe('/peep/system/error'  , function(arguments){_this.handler(arguments);});
          this._subscriptions.message   = topic.subscribe('/peep/system/message', function(arguments){_this.handler(arguments);});
        }
      /**
       * peep.handler() - Function to activate a toaster 
       * 
       * Called by any object wanting to activate a toaster.
       * 
       * It just provides a place to parse which toaster gets to receive the message
       * and abstracts the toasters themselves from the main body of code - This is
       * because they are dojox widgets no mainstream dojo.For this reason we have to
       * assume that they may change so over time, so all changes to the invocation etc.
       * can be handled by changes to this code in order to keep the main application
       * objects agnostic.
       * 
       * we have two toasters at present - errors and messages, but there's no real limit.
       * Text and background colours for the messages are defined in css/themes/PEEP/layout/Toaster.css 
       * and determined by the type parameter. This is extendible. See the css file for
       * examples .. it should be self-explanatory
       *
       * @param msg - string - HTML format - the actual message to be delivered by the toaster
       * @param type - string - determines the colouring of the toaster 
       * @param dur - integer - milliseconds to keep the toaster displayed (0 = requires user action to close)
       */
      
      , handler: function(arg) {
          var key = arg.toUpperCase();
          var _m = this._strings.getErrors()[key];
          
          var _mstring =  "<p class='centerp'><strong>"+_m.type.toUpperCase()+" MESSAGE"+"</p></strong><hr />"+
                          "<p class='centerp'><strong>"+_m.message+"</strong></p>";
          
          var _message = {message: _mstring, type: _m.type, duration: _m.duration};
          
          var msgQ = (array.indexOf(['warning', 'error', 'fatal'], _m.type) == -1)?'sysMessage':'sysError';
          
          topic.publish('/peep/'+msgQ,  _message);
        }
      }
    );
  }
);
